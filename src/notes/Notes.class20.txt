this keyword refers to the current class/object/instance

this can be used to access current class instance variables and methods

this() -used with constructor to call current class constructor

super keyword refer to parent class

super  used to access parent variable and method

super() used to call parent constructor


Inheritance
What it is? - process when subclass acquires properties and behavior from the super class

Why to use it? - for code re-usability, readability, eliminate code redundancy

How to implement? - using extends keyword

class Parent {

}

class Child extends Parent{

}
Inheritance Types:
Single - 1 child 1 parent
Multilevel - grandparent -> parent -> child
Hierarchy -  1 parent multiple children

Can a child class have multiple PARENTS? - Multiple Inheritance
    using class concept - NO

Access Modifiers:
 4 types

 from less restrictive to the most

 public -> protected > default -> private

Private members (variables and methods) DO NOT PARTICIPATE in the inheritance

VARIABLES SYNTAX

    OPTIONAL         OPTIONAL           MUST    MUST
access modifiers  nonAccess modifier  dataType  name;


METHODS SYNTAX

   OPTIONAL          OPTIONAL          MUST      MUST
access modifiers  nonAccess modifier  returnType name() {}

super keyword - used to refer to the immediate parent class

super can be used with variables and methods
super() can be used with constructors

Flower flower1 = new Flower();

new -> creates an Object
Flower(); -> initializes the object (calling a constructor)

flower1 -> is variable(reference variable)
Flower -> Type

        String str=new String();
        str="Hello";

        String str1=new String("hello");

ALL CLASSES IN JAVA HAVE a PARENT CLASS
WHO IS THE PARENT? PARENT OF ALL CLASS IS OBJECT CLASS
Object is a root of all classes, every class has Object as a superclass
we don't see it but it set as a default

Katy Q&A:
Q-Why multiple inheritance cannot support in class concept
A-When we create 2 parents class even we don't define anything inside but
they still have default methods from the root class which is called Object class
and when we try to extend parent class to single class it will get duplicate
the default method that's why we use interface concept to solve this problem

constructor cannot inherit by the child class but can use help from super keyword

Constructors are not considered members of a class in Java,
and they are not inherited by a child class in the same way that methods or fields are.
Constructors are used to create an instance of a class, and they are not
part of the class's interface.

When a subclass is derived from a superclass,
the subclass does not inherit the constructors of the superclass.
Instead, the subclass can define its own constructor
that calls the superclass constructor using the super keyword.
This allows the subclass to reuse the code in the superclass constructor
and extend its behavior as needed.

In this way, the subclass constructor is related to the superclass constructor,
but it is not considered to be an inheritance relationship.
The subclass constructor is unique to the subclass and is not part of the superclass.
